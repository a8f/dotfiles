# General indentation and formatting
indent_with_tabs = 0 # 1 = indent to level only, 2 = indent with tabs
input_tab_size = 8 # original tab size
output_tab_size = 4 # new tab size
indent_columns = 4
indent_align_string = true # align broken strings
indent_brace = 0
eat_blanks_before_close_brace = true
eat_blanks_after_open_brace = true
indent_switch_case = 4
#ident_else_if = true
indent_case_brace = 4
# Align * with var names instead of type name
align_var_def_star_style = 1
align_var_def_amp_style = 1
align_typedef_star_style = 1
sp_after_ptr_star = remove # int *a vs int * a

# Newlines
nl_enum_brace = remove # "enum {" vs "enum \n {"
nl_union_brace = remove # "union {" vs "union \n {"
nl_struct_brace = remove # "struct {" vs "struct \n {"
nl_do_brace = remove # "do {" vs "do \n {"
nl_if_brace = remove # "if () {" vs "if () \n {"
nl_for_brace = remove # "for () {" vs "for () \n {"
nl_else_brace = remove # "else {" vs "else \n {"
nl_while_brace = remove # "while () {" vs "while () \n {"
nl_switch_brace = remove # "switch () {" vs "switch () \n {"
nl_func_var_def_blk = 1
nl_before_case = 1
nl_fcall_brace = remove # "foo() {" vs "foo()\n{"
nl_fdef_brace = remove # "int foo() {" vs "int foo()\n{"
nl_brace_while = remove
nl_brace_else = remove
nl_squeeze_ifdef = true
nl_else_if = remove
# Force single line statements without braces onto one line
# mod_full_brace_nl is set so that braces aren't removed
nl_create_if_one_liner = true
nl_create_while_one_liner = true
nl_create_for_one_liner = true

# Spaces
sp_before_semi = remove
sp_paren_paren = remove # space between (( and ))
sp_return_paren = force # "return (1);" vs "return(1);"
sp_sizeof_paren = remove # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen = force # "if (" vs "if("
sp_after_sparen = force # "if () {" vs "if (){"
sp_after_cast = force # "(int) a" vs "(int)a"
sp_inside_braces = remove # "{ 1 }" vs "{1}"
sp_inside_braces_struct= remove # "{ 1 }" vs "{1}"
sp_inside_braces_enum = remove # "{ 1 }" vs "{1}"
sp_inside_paren = remove
sp_inside_fparen = remove
sp_inside_sparen = remove
sp_type_func = force
sp_assign = force
sp_arith = force
sp_bool= force
sp_compare = force
sp_after_comma = force
sp_func_def_paren = remove # "int foo (){" vs "int foo(){"
sp_func_call_paren = remove # "foo (" vs "foo("
sp_func_proto_paren = remove # "int foo ();" vs "int foo();"
sp_fparen_brace = force # int foo() { vs int foo(){
sp_else_brace = force # else { vs else{
sp_brace_else = force # } else vs }else
sp_inside_angle = remove # "<int>" vs "< int >"
sp_inside_angle_empty = remove
sp_cpp_lambda_fparen = remove
sp_compare = force


# Modifications
mod_paren_on_return = ignore # "return 1;" vs "return (1);"
mod_full_brace_if = remove # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if_chain = true # make all if/else in a chain have or not have braces
mod_full_brace_for= remove # "for () a--;" vs "for () { a--; }"
mod_full_brace_do= ignore # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while = ignore # "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl_block_rem_mlcond = true # don't remove braces from multiline blocks
mod_full_brace_nl = 1 # don't remove braces around statements with newlines in them
